use retailchain::{
    PaymentProcessor, SupplyChainManager, InventoryManager, Blockchain,
    models::{Currency, SupplyChainAction},
};
use serde_json::json;

#[tokio::main]
async fn main() {
    println!("üöÄ Kh·ªüi ch·∫°y RetailChain...");

    // Kh·ªüi t·∫°o c√°c module
    let mut payment_processor = PaymentProcessor::new();
    let mut supply_chain = SupplyChainManager::new();
    let mut inventory = InventoryManager::new(10);
    let mut blockchain = Blockchain::new();

    // Demo: Th√™m s·∫£n ph·∫©m m·ªõi
    println!("\nüì¶ Th√™m s·∫£n ph·∫©m v√†o kho...");
    let product = inventory.add_product(
        "iPhone 14 Pro".to_string(),
        "IP14P-256".to_string(),
        "Latest Apple smartphone".to_string(),
        999.99,
        50,
        "Apple Inc.".to_string(),
    );

    println!("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m: {} (SKU: {})", product.name, product.sku);

    // Demo: Theo d√µi chu·ªói cung ·ª©ng
    println!("\nüìã Ghi nh·∫≠n chu·ªói cung ·ª©ng...");
    supply_chain.add_product(product.clone());

    let _ = supply_chain.record_movement(
        product.id,
        "Factory China".to_string(),
        "Manufacturer".to_string(),
        SupplyChainAction::Manufactured,
        json!({"batch": "BATCH-001"}),
    );

    let _ = supply_chain.record_movement(
        product.id,
        "Warehouse Vietnam".to_string(),
        "Logistics Co.".to_string(),
        SupplyChainAction::Shipped,
        json!({"shipping_id": "SHIP-123"}),
    );

    // Demo: X·ª≠ l√Ω thanh to√°n
    println!("\nüí≥ X·ª≠ l√Ω thanh to√°n...");
    match payment_processor.process_payment(
        "customer_wallet_123".to_string(),
        "retailer_wallet_456".to_string(),
        999.99,
        Currency::USDT,
    ) {
        Ok(transaction) => {
            println!("‚úÖ Thanh to√°n th√†nh c√¥ng: {} {}", transaction.amount, "USDT");
            
            // Th√™m giao d·ªãch v√†o blockchain
            blockchain.add_transaction(transaction.clone());
            println!("üìù ƒê√£ th√™m giao d·ªãch v√†o blockchain");
        }
        Err(e) => println!("‚ùå L·ªói thanh to√°n: {}", e),
    }

    // Demo thanh to√°n v·ªõi loyalty points
    println!("\nüé´ X·ª≠ l√Ω thanh to√°n v·ªõi Loyalty Points...");
    match payment_processor.process_payment_with_loyalty(
        "customer_wallet_123".to_string(),
        "retailer_wallet_456".to_string(),
        50.0,
        100,
    ) {
        Ok(transaction) => {
            println!("‚úÖ Thanh to√°n loyalty th√†nh c√¥ng: {} RETAIL", transaction.amount);
            blockchain.add_transaction(transaction);
        }
        Err(e) => println!("‚ùå L·ªói thanh to√°n loyalty: {}", e),
    }

    // Demo: B√°n s·∫£n ph·∫©m
    println!("\nüõí B√°n s·∫£n ph·∫©m...");
    match inventory.sell_product(product.id, 1) {
        Ok(()) => {
            let updated_product = inventory.get_product(product.id).unwrap();
            println!("‚úÖ ƒê√£ b√°n 1 {} - T·ªìn kho c√≤n: {}", product.name, updated_product.quantity);
            
            // Ghi nh·∫≠n b√°n h√†ng trong chu·ªói cung ·ª©ng
            let _ = supply_chain.record_movement(
                product.id,
                "Retail Store HCM".to_string(),
                "Customer".to_string(),
                SupplyChainAction::Sold,
                json!({"sale_id": "SALE-001"}),
            );
        }
        Err(e) => println!("‚ùå L·ªói b√°n h√†ng: {}", e),
    }

    // Demo: ƒê√†o block m·ªõi
    println!("\n‚õèÔ∏è  ƒê√†o block m·ªõi...");
    match blockchain.mine_block() {
        Ok(block) => {
            println!("‚úÖ ƒê√£ ƒë√†o block #{} v·ªõi {} giao d·ªãch", 
                     block.index, block.transactions.len());
            println!("üîó Hash: {}...", &block.hash[..16]);
        }
        Err(e) => println!("‚ùå L·ªói ƒë√†o block: {}", e),
    }

    // Demo: Ki·ªÉm tra t√≠nh x√°c th·ª±c
    println!("\nüîç Ki·ªÉm tra t√≠nh x√°c th·ª±c s·∫£n ph·∫©m...");
    match supply_chain.verify_authenticity(product.id) {
        Ok(true) => println!("‚úÖ S·∫£n ph·∫©m x√°c th·ª±c"),
        Ok(false) => println!("‚ùå S·∫£n ph·∫©m kh√¥ng x√°c th·ª±c"),
        Err(e) => println!("‚ùå L·ªói x√°c th·ª±c: {}", e),
    }

    // Demo: Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá
    println!("\nüí± Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá...");
    match payment_processor.convert_currency(100.0, &Currency::USDT, &Currency::BTC) {
        Ok(converted) => println!("‚úÖ 100 USDT = {} BTC", converted),
        Err(e) => println!("‚ùå L·ªói chuy·ªÉn ƒë·ªïi: {}", e),
    }

    // Demo: S·ª≠ d·ª•ng c√°c method m·ªõi
    println!("\nüìà Th·ªëng k√™ n√¢ng cao:");
    
    // S·ªë l∆∞·ª£ng movements c·ªßa s·∫£n ph·∫©m
    if let Some(movements_count) = supply_chain.get_product_movements_count(product.id) {
        println!("‚Ä¢ S·ªë l·∫ßn di chuy·ªÉn c·ªßa s·∫£n ph·∫©m: {}", movements_count);
    }
    
    // T·ªïng gi√° tr·ªã kho
    println!("‚Ä¢ T·ªïng s·ªë s·∫£n ph·∫©m trong kho: {}", inventory.get_all_products().len());
    
    // T·ªïng s·ªë giao d·ªãch ƒë√£ x·ª≠ l√Ω
    println!("‚Ä¢ T·ªïng s·ªë giao d·ªãch: {}", payment_processor.get_all_transactions().len());

    // Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
    println!("\nüìä TH·ªêNG K√ä H·ªÜ TH·ªêNG:");
    println!("‚Ä¢ S·ªë block trong chain: {}", blockchain.get_chain_length());
    println!("‚Ä¢ Blockchain h·ª£p l·ªá: {}", blockchain.is_chain_valid());
    
    // Ki·ªÉm tra s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
    let low_stock = inventory.get_low_stock_products();
    if !low_stock.is_empty() {
        println!("‚ö†Ô∏è  C·∫£nh b√°o: {} s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng", low_stock.len());
        for product in low_stock {
            println!("   - {} (SKU: {}): {} s·∫£n ph·∫©m", product.name, product.sku, product.quantity);
        }
    }

    println!("\nüéâ RetailChain ho·∫°t ƒë·ªông th√†nh c√¥ng!");
}

#[cfg(test)]
mod tests {
    use super::*;
    use retailchain::models::Currency;

    #[test]
    fn test_payment_processing() {
        let mut processor = PaymentProcessor::new();
        let result = processor.process_payment(
            "addr1".to_string(),
            "addr2".to_string(),
            100.0,
            Currency::USDT,
        );
        
        assert!(result.is_ok());
    }

    #[test]
    fn test_blockchain_validity() {
        let blockchain = Blockchain::new();
        assert!(blockchain.is_chain_valid());
    }

    #[test]
    fn test_currency_conversion() {
        let processor = PaymentProcessor::new();
        let result = processor.convert_currency(100.0, &Currency::USDT, &Currency::BTC);
        assert!(result.is_ok());
    }

    #[test]
    fn test_currency_equality() {
        let btc1 = Currency::BTC;
        let btc2 = Currency::BTC;
        let eth = Currency::ETH;
        
        assert_eq!(btc1, btc2);
        assert_ne!(btc1, eth);
    }
}